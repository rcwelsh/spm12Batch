#!/bin/bash

# # # # # # # # # # # # # # # # # # 
#
# A command to make it easier on the user to warp the 
# bold/fMRI to the standard template using ANTS, based
# on the results of the antsHiRes
#
# This command will build a script to run and will also 
# run the script in background.
#
# This was written with ANTS 2.2.0 as the testing
# context.
#
#   e.g.    antsfMRI
#
#
#                         Robert C. Welsh
#                         Copyright 2005-2018
#
# antsHiRes
#
# # # # # # # # # # # # # # # # # #

#
# Main newSeg function.
#

VERSION="1.0"
VERSIONDATE="2018-02-09"

# Find out where the current command lives and execute some common code.

theFullCommand="$0 $*"
execDIR=`pwd`

# Find out where the current command lives and execute some common code.

theCommand=`which $0`
thisDir=`dirname $theCommand`

thisCommand=`echo $theCommand | awk -F/ '{print $NF}'`

allowedOptions=" B D d f h M m n T t U v w "

# This piece of code all of the spm12Batch scripts will use
. ${thisDir}/auxiliary/commonCode_AllScriptsStart

# This is the common in-line code for the warping steps.
. ${thisDir}/auxiliary/commonCode_ANTS_01

# This is common in-line code for all spm12Batch script to make sure arguments were passed
. ${thisDir}/auxiliary/commonCode_checkIfArgsPassed

#
# The actual function.
#

. ${thisDir}/auxiliary/parse_arguments

#

. ${thisDir}/auxiliary/superDebugStatus

#
# Ok - let's start displaying things back to the terminal
#

. ${thisDir}/auxiliary/shellScriptInfo

#
# Prepare to write the script.
#

# Makes sure they speficied some subjects.
. ${thisDir}/auxiliary/checkInputForSubjects

# Write out debug status
. ${thisDir}/auxiliary/debugStatus

# Ok, lets do the business.

# Print out the list of subjects that we operate upon.
. ${thisDir}/auxiliary/printSubjectsList

# Now start building the automatic scripts.

#
# the following environmental variables are from spm12Batch_Global
#
#    HOSTCOMPUTER     - name of the computer.
#    SCRIPTNAME       - name of the scripts to write.
#    UMBatchMatcher   - present working directory.
#    FULLSCRIPTNAME   - full path and name of scripts to write.
# 

. ${thisDir}/auxiliary/antsfMRI_part_01

# Common star to all shell scripts

. ${thisDir}/auxiliary/buildMatlabScripts_01

. ${thisDir}/auxiliary/shellScriptStart

. ${thisDir}/auxiliary/antsCommonScript

# Now build the list of directories for each subject.

declare -i is
declare -i ii

curDIR=`pwd`

# Prepare the directory where the work is to take place.

echo "    4) checking for images"

for (( is=1 ; is<=$nSubjects ; is++ ))
do
    
    cd ${UMBatchMaster}/${SUBJDIR}/${subjects[$is]}/
  #
  # create the newSeg directory.
  #
    
    #debugout "- - - - - - - - - - - - - -"        $SuperDebugFLAG
    #debugout "mkdir -p ${fmriPATH}/${coregPATH}/" $SuperDebugFLAG
    #debugout "- - - - - - - - - - - - - -"        $SuperDebugFLAG
    #mkdir -p ${fmriPATH}/${coregPATH}/
    #debugout "- - - - - - - - - - - - - -"        $SuperDebugFLAG
    #debugout "cd ${fmriPATH}/${coregPATH}/"       $SuperDebugFLAG
    #debugout "- - - - - - - - - - - - - -"        $SuperDebugFLAG
    
    . ${thisDir}/auxiliary/coregDirectoryErrorCheck

    # The hires is becoming the source,
    
    SOURCENAME=${HIRESNAME}
    SOURCEEXT=${HIRESEXT}
    
    debugout "HiRes name is : ${SOURCENAME}"   $SuperDebugFLAG
    debugout "- - - - - - - - - - - - - - - -" $SuperDebugFLAG

    # Copy the options file to the current working directory for invocation by the matlab code.

    # We can reuse the vbm8 code here as there is nothing particular in vbm8FindSourceAndMove.
    # this will take the specified high-resolution image set with the "-h" flag and stored in
    # the variable FILENAME and processed by fileExtensionDetermination
    # copies ${HIRES} to ${fmriPATH}/${coregPATH} from the ${anatomyPATH} directory
    
    WARP_FILE1=`ls ${UMBatchMaster}/${SUBJDIR}/${subjects[$is]}/${fmriPATH}/${coregPATH}/${outputName}1Warp.nii.gz 2> /dev/null | wc -l`
    WARP_FILE2=`ls ${UMBatchMaster}/${SUBJDIR}/${subjects[$is]}/${fmriPATH}/${coregPATH}/${outputName}0GenericAffine.mat 2> /dev/null | wc -l`

    WARP_FILE_OK=$(( ${WARP_FILE1} + ${WARP_FILE2} ))
    
    if [ "${WARP_FILE_OK}" != 2 ]
    then
	echo
	echo "MISSING ANTS warping instuctions for ${subjects[$is]}"
	echo
	# 
        # remove the sandbox if we made one.
        #
	${thisDir}/auxiliary/remove_sandbox ${SANDBOXYES} ${SANDBOXPID}
	. ${thisDir}/auxiliary/exit_w_removal
    fi
    
done

echo "    5) building shell script"
echo

# Now put in some varibles needed

. ${thisDir}/auxiliary/antsfMRI_part_02

# Now build the shell script command that will get launched into the background.

. ${thisDir}/auxiliary/startBashSubjectLoop

# Add the ANTS code to the shell script

. ${thisDir}/auxiliary/antsfMRI_part_03

. ${thisDir}/auxiliary/endBashSubjectLoop

# Now add the call for creation of the mask -- needs to be modifed for ANTS

#. ${thisDir}/auxiliary/shellScriptErode

# Finalize the shell script.

. ${thisDir}/auxiliary/shellScriptFinalize

# Now launch into the background if desired.

. ${thisDir}/auxiliary/shellScriptLaunch

#
# all done.
#
