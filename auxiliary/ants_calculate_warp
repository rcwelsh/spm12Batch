    #
    # ants_calculate_warp
    # Code to be copied into the main script
    #
    # should be done with a cat ... >> ${FULLSCRIPTNAME}.sh 
    #
    # built by antsHiRes spm12Batch
    #
    # 2018-02-08
    # Core codelet by Vincent Koppelmans
    # modified by Robert Welsh
    # Salt Lake City, UT
    #
    #
    # Must supply the following things
    #
    # This codelet assumes that it's going to be operating
    # in the directory of the object to be warped.
    #
    # antsM = input file
    #         outputfile name is determined by the prepend
    #         option "outputName"
    #
    # antsE = file extension for the source.
    #
    # antsP = ants_prepend name for output transformation
    #
    # antsS = source directory, where to find the normalization
    #         rules (ants_1Warp.nii.gz and (ants_0GenericAffine.mat)
    #
    # antsT = template file to base sampling on, this should
    #         match was was used in the antsHiRes command
    #
    # antsN = ants output normalized image
    #
    # antsI = inverse ants warped image
    #
    # many assumed ANTS parameters being used.
    #

    # This will inherit outputName from spm12Batch environment

    # 2018-02-08
    # 2018-11-23 -- Added skull stripping option.


    DATE=`date`

    # Setup to use .nii.gz
    
    export FSLOUTPUTTYPETMP=${FSLOUTPUTTYPE}
    export FSLOUTPUTTYPE=NIFTI_GZ

    # We will skull-strip no matter what.

    DATE=`date`

    echo
    echo "${DATE} Starting up ANTS for ${antsS}, skullstripping ${antsM}"
    echo

    # Skull Strip

    antsMSS=ss_${antsM}
    
    # From Vincent
    # base="/erato/data/WelshData/MIND2014"
    # iDIR="${base}/ImagingData/Subjects"
    # oDIR="${base}/Cerebellum/${scriptdate}/01_SSN4"
    # sDIR="${base}/Cerebellum/${scriptdate}/00_Scripts/01_SSN4"
    # ANTSTEMPLDIR="/home/Software/ANTS-2.3.1/Templates/MICCAI2012-Multi-Atlas-Challenge-Data"

    echo "<---------- 01: Skull Strip ---------->"
    antsBrainExtraction.sh \
       -d 3 \
       -a ${antsM}${antsE} \
       -e ${ANTSTEMPLDIR}/T_template0.nii.gz \
       -m ${ANTSTEMPLDIR}/T_template0_BrainCerebellumProbabilityMask.nii.gz \
       -f ${ANTSTEMPLDIR}/T_template0_BrainCerebellumRegistrationMask.nii.gz \
       -o ${antsMSS}_ \
       -k 0

    # N4 Bias Field Correction
    echo "<---------- 02: N4 Bias Field Correction ---------->"

    fslmaths \
       ${antsMSS}_BrainExtractionMask.nii.gz \
       -dilM -dilM \
       ${antsMSS}_BrainExtractionMask_dilM2.nii.gz

    fslmaths \
       ${antsMSS}_BrainExtractionMask.nii.gz \
       -dilM -dilM -dilM -dilM \
       ${antsMSS}_BrainExtractionMask_dilM4.nii.gz

    fslcpgeom \
       ${antsM} \
       ${antsMSS}_BrainExtractionMask.nii.gz

    fslcpgeom \
       ${antsM} \
       ${antsMSS}_BrainExtractionMask_dilM2.nii.gz

    fslcpgeom \
       ${antsM} \
       ${antsMSS}_BrainExtractionMask_dilM4.nii.gz

    # Note: adding a mask forces the N4 application within the mask
    # We want to do the estimation within the mask, but the application
    # on the whole image. So we use -w but not -x.
    N4BiasFieldCorrection \
       -d 3 \
       -i ${antsM}${antsE} \
       -w ${antsMSS}_BrainExtractionMask_dilM4.nii.gz \
       -s 2 \
       -c [125x100x75x50] \
       -o [N4_${antsM}.nii.gz,BF_${antsM}.nii.gz] \
       -v 1

    # Fix the geometry
    
    fslcpgeom \
       ${antsM} \
       N4_${antsM}.nii.gz

    fslcpgeom \
       ${antsM} \
       BF_${antsM}.nii.gz

    # If we are using skull stripped, then strip it!
    
    if [ "${SKULLSTRIP}" == TRUE ]
    then
	fslmaths N4_${antsM}.nii.gz -mul ${antsMSS}_BrainExtractionMask_dilM2.nii.gz ss_N4_${antsM}.nii.gz
        antsMI=ss_N4_${antsM}.nii.gz
	antsN=${antsP}ss_N4_${antsM}
	antsI=${antsP}InverseWarpField_ss_N4_${antsM}
    else
        antsMI=N4_${antsM}.nii.gz
	antsN=${antsP}N4_${antsM}
	antsI=${antsP}InverseWarpField_N4_${antsM}
    fi

    DATE=`date`
    # Warp Calculation
    echo "<---------- 03: Caculating the warp --------------->"

    echo
    echo "${DATE} Starting up ANTS for ${antsS}, warping ${antsM} to template ${antsT}"
    echo
    # Calculate warp using ANTs with SyN

    antsRegistration \
      -d 3 \
      -r [ "${antsT}" , "${antsMI}" , 1] \
      -m mattes[ "${antsT}", "${antsMI}" , 1, 32, regular, 0.3] \
          -t translation[ 0.1 ] \
          -c [${antsCalc1},1.e-8,20]  \
          -s 4x2x1vox  \
          -f 6x4x2 -l 1 \
      -m mattes[ "${antsT}", "${antsMI}" , 1 , 32, regular, 0.3 ] \
          -t rigid[ 0.1 ] \
          -c [${antsCalc2},1.e-8,20]  \
          -s 4x2x1vox  \
          -f 3x2x1 -l 1 \
      -m mattes[ "${antsT}", "${antsMI}" , 1 , 32, regular, 0.3 ] \
          -t affine[ 0.1 ] \
          -c [${antsCalc3},1.e-8,20]  \
          -s 4x2x1vox  \
          -f 3x2x1 -l 1 \
      -m mattes[ "${antsT}" , "${antsMI}" , 0.5 , 32 ] \
      -m cc[ "${antsT}" , "${antsMI}" , 0.5 , 4 ] \
          -t SyN[ .20, 3, 0 ] \
          -c [ ${antsCalc4},-0.01,5 ]  \
          -s 1x0.5x0vox  \
          -f 4x2x1 -l 1 -u 1 -z 1 \
      -o [${antsP},${antsN},${antsI}] \
      -v 1

    ANTS_RETURN_CODE=$? 

    DATE=`date`

    echo
    echo "${DATE} Finished up ANTS for ${antsS}, warping ${antsM} to template ${antsT} with return code ${ANTS_RETURN_CODE}"
    echo

    export FSLOUTPUTTYPE=${FSLOUTPUTTYPETMP}
      
    #
    # done with codelet
    #

